// partie IA

                  public static int bestmove{        // fonction calculant le meilleur coup en fonction des cases disponibles à chaque coup 
			  bestscore=-1000; // (-1 x 1000) ainsi on donne un "poids" au meilleur score possible pour le joueur s'il fait un certain "mouv"
		          int move;
	                  for(int i=0,i<2;i++){
		          for(int j=0,j<2;j++){
			  for(int k=0,k<2;k++){
		        if (plateau[i][j][k]=='-'){
			plateau[i][j][k]= R; // pion ia
			score = minimax(String[][][] plateau, 0, false); // non défini mais c'est la fonction qui permet de trouver le min et max pour le joueur et l'ia
                        plateau[i][j][k] = '-';
				bestscore = max(score,bestscore);
				bestmove = plateau[i][j][k];
				move = {i,j};
				
			plateau[move.i][move.j] = R;
		        Ja= humain;
				
			}
			  }
			  }
			  }
		  }
				score = {  // 0 = égalité/ 1= victoire de l'ia/ -1= victoire du joueur 
					A = 1;
					B = -1;
					C = 0;	
					}
		   
		 public static int minimax(String[][][] plateau, profondeur, estmax){
			 result = checkwinner // regarde à chaque coup s'il y a un gagnant ( ce sont mes conditions de victoire réadaptées)
				 
		if(result != 0){
			return score[résultat];
			
		}	
					}
					
	       if(minimax = estmax){
		       bestscore= 1000;
			  for(i=0,i<2;i++){
		          for(j=0,j<2;j++){
			  for(k=0,k<2;k++){
				  if( plateau[i][j][k]= '-'){
					  plateau[i][j][k]= R; // R pion de l'ia que l'on doit intégrer dans le programme
				score= minimax( plateau, profondeur +1, false);
					  plateau[i][j][k]= '';
				   bestscore= max(score, bestscore);
					 
						  
					  
				  }
			  }
			  }
			  
				  return bestscore;
			  }
	       }
		       
		       else{
			    if(minimax = estmin){
		       bestscore= -1000;
			  for(i=0,i<2;i++){
		          for(j=0,j<2;j++){
			  for(k=0,k<2;k++){
				  if( plateau[i][j][k]= '-'){
					  plateau[i][j][k]= humain;
				score= minimax(String[][][] plateau, profondeur +1, true);
					  plateau[i][j][k]= '-';
					  bestscore= min(score, bestcore);
					  
						  
					  
				  }
			  }
			  }
			   return bestscore;
				 
			  }
			     
			    }
		       }
				  
			Remarque 
      (estmin) et (estmax) sont les 2 fonctions possibles dans le cas de cette algorithme.
      estmin représente donc l'ia qui doit minimiser ses pertes.
      estmax représente le joueur qui veut maximiser les pertes de l'ia.
      
      //
      Principe de l'algorithme minimax:
      D'après le site (https://blog.engineering.publicissapient.fr/2011/09/28/lalgorithme-minimax/)
     
     Posons le problème…

Le problème d’un agent rationnel dans le cadre d’un jeu peut se résumer en une phrase : « Trouver le meilleur coup pour gagner la partie ! ». Posons le problème :

    L’état initial : le plateau du jeu à un instant T
    Les joueurs : quel joueur est en train de jouer ?
    Les actions : les coups légaux (qui respectent les règles) possibles pour un état du plateau de jeu donné.
    Le modèle de transition : permet de déterminer les nouveaux états du plateau de jeu en fonction des actions choisies précédemment.
(schéma sur le site fourni en lien)
Les états représentent les nœuds, les actions représentent les liens, qui permettent de déduire des états enfants et ainsi de suite (//les états parents et grands parents étant les premiers de l'arbre). Dans le cadre des jeux, le graphe est souvent acyclique et orienté, c’est-à-dire qu’aucun lien ne permet de revenir à un nœud déjà exploré. Il y a différentes façon d’explorer un graphe mais elles appartiennent souvent à deux grandes familles : l’exploration en largeur d’abord et l’exploration en profondeur d’abord.

L’objectif de l’agent rationnel est donc d’explorer l’arbre et donc d’évaluer un maximum de coups d’avance afin de déterminer quel sera le meilleur coup à jouer par la suite. 
(voire animation sur le site fourni en lien)
